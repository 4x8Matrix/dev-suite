local Package = script.Parent.Parent.Parent.Parent.Parent

local LuauCeption = require(Package.Vendor.LuauCeption)

local Focus = require(Package.Client.Singletons.Focus)

local VMBindings = require(Package.Client.Singletons.VM.Bindings)
local VMConstants = require(Package.Client.Singletons.VM.Constants)
local VMTypes = require(Package.Client.Singletons.VM.Types)
local VMContext = require(Package.Client.Singletons.VM.Context)
local VMMacros = require(Package.Client.Singletons.VM.Macros)

local cFunctions = LuauCeption.wasm.cfns

local function rconsoleprintImpl(luaState: VMTypes.LuaState)
	local message = VMBindings:ReadCString(VMMacros.lua_tostring(luaState, 1))

	print(`[rconsole][print]: {message}`)

	return 0
end

local function rconsoleinfoImpl(luaState: VMTypes.LuaState)
	local message = VMBindings:ReadCString(VMMacros.lua_tostring(luaState, 1))

	print(`[rconsole][info]: {message}`)

	return 0
end

local function rconsoleerrImpl(luaState: VMTypes.LuaState)
	local message = VMBindings:ReadCString(VMMacros.lua_tostring(luaState, 1))

	print(`[rconsole][err]: {message}`)

	return 0
end

local function rconsoleclearImpl(_: VMTypes.LuaState)
	print(`[rconsole][action]: <clear>`)

	return 0
end

local function rconsolenameImpl(luaState: VMTypes.LuaState)
	local name = VMBindings:ReadCString(VMMacros.lua_tostring(luaState, 1))

	print(`[rconsole][action]: <name: {name}>`)

	return 0
end

local function rconsoleinputImpl(luaState: VMTypes.LuaState)
	print(`[rconsole][action]: <input: "">`)

	cFunctions.lua_pushstring(luaState, VMBindings:LoadCString(""))
	
	return 1
end

local function rconsolecloseImpl(_: VMTypes.LuaState)
	print(`[rconsole][action]: <close>`)

	return 0
end

local function printconsoleImpl(luaState: VMTypes.LuaState)
	local message = VMBindings:ReadCString(VMMacros.lua_tostring(luaState, 1))

	print(`[rconsole][print-byte]: {message}`)

	return 0
end

local function getgenvImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_getfield(luaState, VMConstants.LUA_REGISTRYINDEX, VMBindings:LoadCString("script.exploit.environment"))

	return 1
end

local function getrenvImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_getfield(luaState, VMConstants.LUA_REGISTRYINDEX, VMBindings:LoadCString("script.roblox.environment"))

	return 1
end

local function getregImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_pushvalue(luaState, VMConstants.LUA_REGISTRYINDEX)
	
	return 1
end

local function getgcImpl(luaState: VMTypes.LuaState)
	VMMacros.lua_newtable(luaState)

	return 1
end

local function getinstancesImpl(luaState: VMTypes.LuaState)
	local map = VMContext:GetMap()
	local instances = {}

	for _, instance in map do
		if typeof(instance) == "Instance" then
			table.insert(instances, instance)
		end
	end

	VMBindings:FromLuau(luaState, instances)

	return 1
end

local function getnilinstancesImpl(luaState: VMTypes.LuaState)
	local map = VMContext:GetMap()
	local instances = {}

	for _, instance in map do
		if typeof(instance) == "Instance" then
			if instance.Parent then
				continue
			end

			table.insert(instances, instance)
		end
	end

	VMBindings:FromLuau(luaState, instances)

	return 1
end

-- fixme: implement this? need to figure out how requiring stuff works.. eek
local function getloadedmodulesImpl(luaState: VMTypes.LuaState)
	VMMacros.lua_newtable(luaState)

	return 1
end

local function getconnectionsImpl(luaState: VMTypes.LuaState)
	local targetSignal = VMBindings:ToLuau(luaState, 1)
	local connections = {}

	for connection, signal in VMContext:GetMap() do
		if typeof(connection) ~= "RBXScriptConnection" then
			continue
		end

		if signal == targetSignal then
			table.insert(connections, connection)
		end
	end

	VMBindings:FromLuau(luaState, connections)

	return 1
end

local function checkcallerImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_pushboolean(luaState, 1)
		
	return 1
end

local function clonefunctionImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_clonefunction(luaState, 1)
		
	return 1
end

local function iscclosureImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_pushboolean(luaState, cFunctions.lua_iscfunction(luaState, 1))
		
	return 1
end

local function isrbxactiveImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_pushboolean(luaState, Focus:IsActive() and 1 or 0)
		
	return 1
end

local function loadstringImpl(luaState: VMTypes.LuaState)
	local value = VMMacros.lua_tostring(luaState, -1)
	local chunkname = VMMacros.lua_tostring(luaState, -2)

	local bytecode = cFunctions.luau_compile(value, #VMBindings:ReadCString(value), 0, 0)
	local load = cFunctions.luau_load(luaState, chunkname, bytecode, #VMBindings:ReadCString(bytecode), 0)

	if load == 0 then
		return 1
	end

	cFunctions.lua_pushnil(luaState)
	cFunctions.lua_insert(luaState, -2)

	return 2
end

local function newcclosureImpl(luaState: VMTypes.LuaState)
	cFunctions.lua_pushvalue(luaState, 1)

	VMMacros.lua_pushcclosure(luaState, VMBindings:LoadCFunction(luaState, function()
		cFunctions.lua_pushvalue(luaState, VMMacros.lua_upvalueindex(1))
		
		local numArgs = cFunctions.lua_gettop(luaState) - 1

		if numArgs > 0 then
			for i = 1, numArgs do
				cFunctions.lua_pushvalue(luaState, i)
			end
		end

		cFunctions.lua_pcall(luaState, numArgs, -1, 0)

		return cFunctions.lua_gettop(luaState)
	end), 1)

	return 1
end

-- todo: implement the following environment functions!
local function fireclickdetectorImpl(luaState: VMTypes.LuaState)
	return 0
end

local function fireproximitypromptImpl(luaState: VMTypes.LuaState)
	return 0
end

local function firetouchinterestImpl(luaState: VMTypes.LuaState)
	return 0
end

local function setscriptableImpl(luaState: VMTypes.LuaState)
	return 0
end

local function gethiddenpropertyImpl(luaState: VMTypes.LuaState)
	return 0
end

local function setsimulationradiusImpl(luaState: VMTypes.LuaState)
	return 0
end

local globals = table.freeze({
	-- console functions
	rconsoleprint = rconsoleprintImpl,
	rconsoleinfo = rconsoleinfoImpl,
	rconsoleerr = rconsoleerrImpl,
	rconsoleclear = rconsoleclearImpl,
	rconsolename = rconsolenameImpl,
	rconsoleinput = rconsoleinputImpl,
	rconsoleclose = rconsolecloseImpl,
	printconsole = printconsoleImpl,

	-- environment functions
	getgenv = getgenvImpl,
	getrenv = getrenvImpl,
	getreg = getregImpl,
	getgc = getgcImpl,
	getinstances = getinstancesImpl,
	getnilinstances = getnilinstancesImpl,
	getloadedmodules = getloadedmodulesImpl,
	getconnections = getconnectionsImpl,
	checkcaller = checkcallerImpl,
	clonefunction = clonefunctionImpl,
	iscclosure = iscclosureImpl,
	isrbxactive = isrbxactiveImpl,
	loadstring = loadstringImpl,
	newcclosure = newcclosureImpl,

	fireclickdetector = fireclickdetectorImpl,
	fireproximityprompt = fireproximitypromptImpl,
	firetouchinterest = firetouchinterestImpl,
	setscriptable = setscriptableImpl,
	gethiddenproperty = gethiddenpropertyImpl,
	setsimulationradius = setsimulationradiusImpl,
})

return function(luaState: VMTypes.LuaState)
	for globalName, global in globals do
		VMMacros.lua_pushcfunction(luaState, VMBindings:LoadCFunction(luaState, global), VMBindings:LoadCString(globalName))
		VMMacros.lua_setglobal(luaState, VMBindings:LoadCString(globalName))
	end
	
	-- globals

	-- libraries

	-- instances
	
end
