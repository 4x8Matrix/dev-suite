local Players = game:GetService("Players")
local Package = script.Parent.Parent.Parent.Parent.Parent.Parent

local LuauCeption = require(Package.Vendor.LuauCeption)

local VMBindings = require(Package.Client.Singletons.VM.Bindings)
local VMEnvironment = require(Package.Client.Singletons.VM.Environment)
local VMTypes = require(Package.Client.Singletons.VM.Types)
local VMMacros = require(Package.Client.Singletons.VM.Macros)

local cFunctions = LuauCeption.wasm.cfns

local function getService(luaState: VMTypes.LuaState)
	local serviceToRequire =  VMBindings:ToLuau(luaState, 2)

	if serviceToRequire == "CoreGui" then
		VMBindings:FromLuau(luaState, Players.LocalPlayer.PlayerGui)
	else
		VMBindings:FromLuau(luaState, game:GetService(serviceToRequire))
	end
	
	return 1
end

local function __index()
	local __index
	
	__index = VMEnvironment:Hook("__index", function(luaState: VMTypes.LuaState)
		local instance = VMBindings:ToLuau(luaState, 1)

		local indexPointer = VMMacros.lua_tostring(luaState, 2)
		local index = VMBindings:ReadCString(indexPointer)

		if instance == game and index == "CoreGui" then
			VMBindings:FromLuau(luaState, Players.LocalPlayer.PlayerGui)

			return 1
		end

		return __index(luaState)
	end)
end

local function __namecall()
	local __namecall
	
	__namecall = VMEnvironment:Hook("__namecall", function(luaState: VMTypes.LuaState)
		local methodNamePointer = cFunctions.lua_namecallatom(luaState, 0)
		local methodName = VMBindings:ReadCString(methodNamePointer)

		if methodName == "GetService" then
			return getService(luaState)
		end

		return __namecall(luaState)
	end)
end

return function()
	__index()
	__namecall()
end
